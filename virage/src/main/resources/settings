TIMESTAMP=

# This value is used for internal consistency checks, please do not alter it!
VIRAGE_CONFIG_VERSION=0.1.0


## External executables

ISABELLE_EXECUTABLE=isabelle

GCC_EXECUTABLE=gcc

SWI_PROLOG_EXECUTABLE=swipl

# Path to libswipl.so
SWI_PROLOG_LIBSWIPL_PATH=

# Path to the SWI-Prolog library (usually $SWI_HOME_DIR/lib/$ARCHITECTURE, should contain libjpl.so, if it does not, install swi-prolog-java)
SWI_PROLOG_LIBRARIES_PATH=


## System settings
#verbosity_level

# Path for all files generated by ViRAGe.
SYSTEM_DEFAULT_OUTPUT_PATH=./target/generated-sources/

# Custom text editor (only used when xdg-open fails; if empty, environment variable $EDITOR is used).
SYSTEM_TEXT_EDITOR=


## Isabelle settings

# Isabelle tactics to be used by the brute force tactics choice (;-separated list).
ISABELLE_TACTICS=simp;blast;metis;fastforce

# Path to an Isabelle ROOT file.
# A compositional framework will be extracted and written to an (E)PL file.
ISABELLE_PATH_TO_ROOT_FILE=src/test/resources/verifiedVotingRuleConstruction/theories/ROOT


## Voting-specific settings

# Names for generic type variables. These can be used in all session-specific settings.
# (;-separated list of "alias->Isabelle type" pairs)
SESSION_SPECIFIC_TYPE_ALIASES=Alternative->?'a

# Type synonyms defined in Isabelle (;-separated list of signature->abbreviation pairs)
SESSION_SPECIFIC_TYPE_SYNONYMS=Set.set(Product_Type.prod(Alternative)(Alternative))->Preference_Relation;\
  List.list(Preference_Relation)->Profile;\
  Product_Type.prod(Set.set(Alternative))(Product_Type.prod(Set.set(Alternative))(Set.set(Alternative)))->Result;\
  fun(Set.set(Alternative))(fun(Profile)(Result))->Electoral_Module;\
  fun(Set.set(Alternative))(fun(Result)(fun(Result)(Result)))->Aggregator;\
  fun(Alternative)(fun(Set.set(Alternative))(fun(Profile)(Nat.nat)))->Evaluation_Function;\
  fun(Result)(HOL.bool)->Termination_Condition

# Atomic types, i.e. types that cannot be decomposed further and where no meaningful properties are defined for.
SESSION_SPECIFIC_ATOMIC_TYPES=Profile;\
  Preference_Relation;\
  HOL.bool;\
  Alternative;\
  List.list(Alternative);\
  Set.set(Alternative);\
  Rel.rel(Alternative)

# Additional Properties that have to be assumed to hold for every instance of the corresponding type.
# Hopefully, this will be a temporary fix.
SESSION_SPECIFIC_ASSUMPTIONS=linear_order(Preference_Relation);\
  trans(Preference_Relation);\
  finite_profile(Set.set(Alternative),Profile);\
  custom_greater(Nat.nat,Nat.nat)

# Aliases, usually defined as abbreviations or definitions in Isabelle (;-separated list of abbreviation->expansion pairs).
# Might be possible to automatize in the future.
SESSION_SPECIFIC_COMPONENT_ALIASES=elector(X)->sequential_composition(X,elect_module);\
  iter(X)->loop_composition(X,defer_equal_condition(1));\
  iterelect(X)->elector(iter(X));\
  maximum_parallel_composition(X,Y)->parallel_composition(X,Y,max_aggregator);\
  smc(X)->iterelect(maximum_parallel_composition(sequential_composition(pass_module(2,X),sequential_composition(revision_composition(plurality),pass_module(1,X))),drop_module(2,X)))



